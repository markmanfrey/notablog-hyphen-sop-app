export = TaskManager2;
/**
 * @typedef TaskManager2Options
 * @property {number} [concurrency]
 */
declare class TaskManager2 {
    /**
     * @param {TaskManager2Options} opts
     */
    constructor(opts?: TaskManager2Options);
    active: number;
    maxActive: number;
    reqQueue: any[];
    /**
     * Queue an async function call.
     * @param {() => Promise<any>} func - A function that returns a Promise.
     * @param {any[]} args - Arguments for the function.
     * @returns {Promise<any>} A Promise that wraps the Promise returned by
     * the async function, i.e. its interface is the same as the original
     * Promise, so it can be used in the same way as usual.
     */
    queue(func: () => Promise<any>, args: any[]): Promise<any>;
    /**
     * Check if there are empty concurrency threads and pending tasks.
     * Execute a task if there is an idle concurrency thread.
     * @private
     */
    private _run;
    /**
     * Idle a concurrency thread and check if there are tasks to execute.
     * @private
     */
    private _next;
}
declare namespace TaskManager2 {
    export { TaskManager2Options };
}
type TaskManager2Options = {
    concurrency?: number;
};
//# sourceMappingURL=TaskManager2.d.ts.map