export = TaskManager;
/**
 * @typedef TaskManagerOptions
 * @property {Number} delay - Ideal delay between two tasks.
 * @property {Number} delayJitterMax - Absolute value of max delay
 * deviation added to ideal delay.
 * @property {Number} parallelNum - Number of tasks to be run in parallel.
 * @property {Boolean} debug - Whether to print debug messages.
 */
/**
 * Execution scheduler for sync or async functions.
 * @param {Array.<Object>} tasks - An array. Each element corresponds to
 * one execFunc call where the element is the argument.
 * @param {Function} execFunc - The function that handles a task.
 * @param {TaskManagerOptions} options - An object to customize delay,
 * delayJitterMax, parallelNum, debug.
 */
declare function TaskManager(tasks: Array<any>, execFunc: Function, options?: TaskManagerOptions): void;
declare class TaskManager {
    /**
     * @typedef TaskManagerOptions
     * @property {Number} delay - Ideal delay between two tasks.
     * @property {Number} delayJitterMax - Absolute value of max delay
     * deviation added to ideal delay.
     * @property {Number} parallelNum - Number of tasks to be run in parallel.
     * @property {Boolean} debug - Whether to print debug messages.
     */
    /**
     * Execution scheduler for sync or async functions.
     * @param {Array.<Object>} tasks - An array. Each element corresponds to
     * one execFunc call where the element is the argument.
     * @param {Function} execFunc - The function that handles a task.
     * @param {TaskManagerOptions} options - An object to customize delay,
     * delayJitterMax, parallelNum, debug.
     */
    constructor(tasks: Array<any>, execFunc: Function, options?: TaskManagerOptions);
    /**
     * Init <parallelNum> virtual threads and execute tasks.
     */
    start: () => void;
    /**
     * Return a Promise that will resolve when all tasks are finished.
     */
    finish: () => any;
}
declare namespace TaskManager {
    export { TaskManagerOptions };
}
type TaskManagerOptions = {
    /**
     * - Ideal delay between two tasks.
     */
    delay: number;
    /**
     * - Absolute value of max delay
     * deviation added to ideal delay.
     */
    delayJitterMax: number;
    /**
     * - Number of tasks to be run in parallel.
     */
    parallelNum: number;
    /**
     * - Whether to print debug messages.
     */
    debug: boolean;
};
//# sourceMappingURL=TaskManager.d.ts.map